//@version=6
indicator(shorttitle="BBAWE", title="Bollinger Awesome Alert R1.1 by JustUncleL", overlay=true)


// ■■■■■■■ ■■■■■■■ 影片來源
// https://www.youtube.com/shorts/py9FM2aCctY





// === INPUTS ===
// Bollinger Bands Inputs
bb_use_ema = input(false, title="Use EMA for Bollinger Band")
bb_filter = input(false, title="Filter Buy/Sell with Bollinger Bands")
sqz_filter = input(false, title="Flter Buy/Sell with BB squeeze")
bb_length = input(20, title="Bollinger Length")
bb_source = input(close, title="Bollinger Source")
bb_mult = input(2.0, title="Base Multiplier")
// EMA inputs
fast_ma_len = input(3, title="Fast EMA length")
// Awesome Inputs
nLengthSlow = input(34, title="Awesome Length Slow")
nLengthFast = input(5, title="Awesome Length Fast")
// === /INPUTS ===
sqz_length = input(100, "BB Relative Squeeze Length")
sqz_threshold = input(50, "BB Squeeze Threshold %")

// === SERIES ===
// Breakout Indicator Inputs
ema_1 = ta.ema(bb_source, bb_length)
sma_1 = ta.sma(bb_source, bb_length)
bb_basis = bb_use_ema ? ema_1 : sma_1
fast_ma = ta.ema(bb_source, fast_ma_len)

// Deviation
dev = ta.stdev(bb_source, bb_length)
bb_dev = bb_mult * dev

// Upper bands
bb_upper = bb_basis + bb_dev
// Lower Bands
bb_lower = bb_basis - bb_dev

// Calculate Awesome Oscillator
xSMA1_hl2 = ta.sma(hl2, nLengthFast)
xSMA2_hl2 = ta.sma(hl2, nLengthSlow)
xSMA1_SMA2 = xSMA1_hl2 - xSMA2_hl2

// Calculate direction of AO
AO = xSMA1_SMA2 >= 0 ? xSMA1_SMA2 > xSMA1_SMA2[1] ? 1 : 2 : 
   xSMA1_SMA2 > xSMA1_SMA2[1] ? -1 : -2

// Calculate BB spread and average spread
spread = bb_upper - bb_lower
avgspread = ta.sma(spread, sqz_length)

// Calculate BB relative %width for Squeeze indication
bb_squeeze = spread / avgspread * 100

// Calculate Upper and Lower band painting offsets based on 50% of atr.
bb_offset = ta.atr(14) * 0.5
bb_sqz_upper = bb_upper + bb_offset
bb_sqz_lower = bb_lower - bb_offset

// === /SERIES ===

// === PLOTTING ===
// plot BB basis
plot(bb_basis, title="Basis Line", color=color.red, linewidth=2)

// plot BB upper and lower bands
ubi = plot(bb_upper, title="Upper Band Inner", color=color.blue, linewidth=1)
lbi = plot(bb_lower, title="Lower Band Inner", color=color.blue, linewidth=1)

// center BB channel fill
fill(ubi, lbi, title="Center Channel Fill", color=color.new(color.silver, 90))

//Indicate BB squeeze based on threshold.
usqzi = plot(bb_sqz_upper, "Hide Sqz Upper", display=display.none)
lsqzi = plot(bb_sqz_lower, "Hide Sqz Lower", display=display.none)
fill(ubi, usqzi, color=color.new(bb_squeeze > sqz_threshold ? color.white : color.blue, 50))
fill(lbi, lsqzi, color=color.new(bb_squeeze > sqz_threshold ? color.white : color.blue, 50))

// plot fast ma
plot(fast_ma, title="Fast EMA", color=color.black, linewidth=2)

// Calc breakouts
break_down = ta.crossunder(fast_ma, bb_basis) and close < bb_basis and math.abs(AO) == 2 and 
   (not bb_filter or close > bb_lower) and 
   (not sqz_filter or bb_squeeze > sqz_threshold)
   
break_up = ta.crossover(fast_ma, bb_basis) and close > bb_basis and math.abs(AO) == 1 and 
   (not bb_filter or close < bb_upper) and 
   (not sqz_filter or bb_squeeze > sqz_threshold)

// Show Break Alerts
plotshape(break_down, title="Breakout Down", style=shape.labeldown, location=location.abovebar, size=size.large, text="Sell", color=color.red)
plotshape(break_up, title="Breakout Up", style=shape.labelup, location=location.belowbar, size=size.large, text="Buy", color=color.green)


// === /PLOTTING ===

// Send alert to TV alarm sub-system
alertcondition(break_down or break_up, title="BBAWE Alert", message="BBAWE Alert close={{close}}")
alertcondition(break_down, title="BBAWE Sell", message="SELL close={{close}}")
alertcondition(break_up, title="BBAWE Buy", message="BUY close={{close}}")


// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 
// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 
// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 


length = input.int(title="Length", defval=20, minval=0)

bband(length, mult) =>
	ta.sma(close, length) + mult * ta.stdev(close, length)

keltner(length, mult) =>
	ta.ema(close, length) + mult * ta.ema(ta.tr, length)

e1 = (ta.highest(high, length) + ta.lowest(low, length)) / 2 + ta.sma(close, length)
osc = ta.linreg(close - e1 / 2, length, 0)
diff = bband(length, 2) - keltner(length, 1)
osc_color = osc[1] < osc[0] ? osc[0] >= 0 ? #00ffff : #cc00cc : osc[0] >= 0 ? #009b9b : #ff9bff
mid_color = diff >= 0 ? color.green : color.red


// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 
// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 
// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 


//信號 A (單次信號)   ■■■(需要輸入之處)
long1 = (osc_color==#00ffff or osc_color ==#009b9b ) and break_up
//信號 B (單次信號)   ■■■(需要輸入之處)
shor1 = (osc_color==#ff9bff or osc_color ==#cc00cc ) and break_down

signle_length_in1 = input.int(5)                     //線段長度(設定)
var signle_length1 = 0                               //線段長度(當下)
var si_value1 = float(na)                            //線段值
var si_color1 = color(na)                            //線段顏色

if long1                                             //信號 A 確立
    signle_length1 := signle_length_in1               
    si_value1 := close
    si_color1 := color.rgb(0, 183, 255)                       //信號 顏色A ■■■

if shor1                                             //信號 B 確立
    signle_length1 := signle_length_in1               
    si_value1 := close
    si_color1 := color.rgb(248, 162, 1)                        //信號 顏色B ■■■

if signle_length1>0                                  //長度逐次遞減
    signle_length1 := signle_length1 - 1
else
    si_value1 := float(na)

plot(si_value1,                                      //信號繪製
 color = si_color1,
 linewidth=5,
 style=plot.style_steplinebr,
 title="■■■"
 )


// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 
// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 
// ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ ■■■■■■ 


	//■■■■■■■■■   ☪𒀹𒀹  //時間 & 點位標示線
h = str.tostring(hour(time), "00")
m = str.tostring(minute(time), "00")
CO_hm = h=="00"and m=="00"? color.blue :(h=="06"or h=="18")and m=="00"?color.green :h=="12" and m=="00"? color.orange: time-time[1] > 2*(time[1]-time[2])? color.red: color(na)
time_00 = h=="00" and m == "00" ? 0 : h =="12"and m == "00" ? 12 : 99
// ■■■■■■ 時間標記 & 10點標記
plot(CO_hm == color(na)? float(na): close + 0.2 , 
     color = CO_hm, title = "時間標記",  
     linewidth = 4, style =  plot.style_steplinebr ) 
plot(CO_hm == color(na)? float(na): close + 0.3 , 
     color = CO_hm, title = "時間標記",  
     linewidth = 4, style =  plot.style_steplinebr ) 
